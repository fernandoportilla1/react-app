{"version":3,"sources":["serviceWorker.js","components/Header/index.js","components/Header/Header.js","components/SearchForm/index.js","components/SearchForm/SearchForm.js","components/Paginator/index.js","components/Paginator/Paginator.js","components/RepositoryRow/index.js","components/RepositoryRow/RepositoryRow.js","components/HintMessage/index.js","components/HintMessage/HintMessage.js","components/RepositoryList/index.js","components/RepositoryList/RepositoryList.js","containers/SearchContainer/index.js","containers/SearchContainer/SearchContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","React","Component","SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","state","search","e","setState","target","value","preventDefault","type","placeholder","defaultValue","Paginator","PaginatedComponent","_Component","onClick","page","inherits","createClass","key","nextProps","data","length","itemsPerPage","_this2","numberPages","Math","ceil","pages","_loop","i","cssClass","concat","push","href","slice","paginatedProps","assign","pageData","renderPagination","defaultProps","WrappedComponent","RepositoryRow","repository","full_name","fa","stargazers_count","forks_count","PureComponent","HintMessage","render","children","RepositoryList","text","loading","queried","components_HintMessage","map","components_RepositoryRow","id","renderMessage","renderTable","SearchContainer","result","repo","owner","login","avatar_url","html_url","setTimeout","stubData","components_Header","components_SearchForm","components_RepositoryList","ReactDOM","containers_SearchContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcd88de4.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Header from './Header';\nexport default Header;\n","import React from 'react';\n\n// Importamos los estilos\nimport './Header.css';\n\n/**\n * Muestra el header de nuestra aplicación. No necesitamos que se actualice por\n * dejamos shouldComponenteUpdate nunca retornará true.\n */\nclass Header extends React.Component {\n    /**\n     * Al ser contenido estático, no necesitamos actualizar este componente.\n     */\n    shouldComponenteUpdate() {\n        return false;\n    }\n\n    /**\n     * Render the Header component\n     */\n    render() {\n        return <header className=\"Header\">\n            <h1>Github Releases</h1>\n        </header>\n    }\n}\n\n// Export the class\nexport default Header;\n","import SearchForm from './SearchForm';\nexport default SearchForm;\n","import React from 'react';\n\n/**\n * Renderiza el formulario de búsqueda.\n */\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n\n    this.state = {\n      search: ''\n    }\n  }\n\n  onChange(e) {\n    this.setState({ search: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state.search);\n  }\n\n  render() {\n    return <form onSubmit={this.onSubmit}>\n      <label> Search a Repositories </label>\n      <input type=\"text\" className=\"u-full-widh\" placeholder=\"react, webpack\" onChange={this.onChange} defaultValue={this.state.search} />\n      <p className=\"aling-center\">\n        <input type=\"submit\" className=\"button-primary\" value=\"Search\" />\n      </p>\n    </form>;\n  }\n}\n\n// Export the class\nexport default SearchForm;\n","import Paginator from './Paginator';\nexport default Paginator;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport './Paginator.css';\n\nexport default PaginatedComponent => {\n    class Paginator extends Component {\n        constructor(props) {\n            super(props);\n\n            this.onClick = this.onClick.bind(this);\n\n            this.state = {\n                page: 0\n            }\n        }\n        componentDidUpdate(nextProps) {\n            let page = this.state.page;\n            if (nextProps.data.length / this.props.itemsPerPage < page) {\n                page = 0;\n            }\n            if (page !== this.state.page) {\n                this.setState({ page });\n            }\n        }\n        onClick(e, page) {\n            e.preventDefault();\n            if (page !== this.state.page) {\n                this.setState({ page });\n            }\n        }\n        renderPagination() {\n            let numberPages = Math.ceil(this.props.data.length / this.props.itemsPerPage),\n                pages = [];\n            if (numberPages > 1) {\n                for (let i = 0; i < numberPages; i++) {\n                    let cssClass = \"Paginator__Page\";\n                    cssClass = i === this.state.page ? `${cssClass} Paginator__Page--active` : cssClass;\n\n                    pages.push(\n                        <a href=\"#\" className={cssClass} key={i} onClick={(e) => this.onClick(e, i)}>\n                            {i + 1}\n                        </a>\n                    )\n                }\n            }\n\n            return (\n                <div className=\"Paginator__Pagination\">\n                    {pages}\n                </div>\n            )\n        }\n\n        pageData() {\n            let data = [];\n\n            if (this.props.data.length > 0) {\n                data = this.props.data.slice(this.state.page * this.props.itemsPerPage,\n                    (this.state.page + 1) * this.props.itemsPerPage);\n            }\n\n            return data;\n        }\n\n        render() {\n            let paginatedProps = Object.assign({}, this.props,\n                { data: this.pageData() });\n\n            return <section className=\"Paginator\">\n                <PaginatedComponent {...paginatedProps} />\n                {this.renderPagination()}\n            </section>;\n        }\n    }\n\n    Paginator.propTypes = {\n        itemsPerPage: PropTypes.number,\n        data: PropTypes.array.isRequired\n    }\n\n    Paginator.defaultProps = {\n        itemsPerPage: 4\n    }\n\n    Paginator.WrappedComponent = PaginatedComponent;\n\n    return Paginator;\n}\n","import RepositoryRow from './RepositoryRow';\nexport default RepositoryRow;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types'\n// import { Route } from 'react-router';\n\n// Componentes\n// import GithubAvatar from '../GithubAvatar'\nimport { FaStar, FaCode } from 'react-icons/fa'\n//import FaCodeFork from '../GithubAvatar'\n\n/**\n * Renderiza la información relativa a un repositorio\n */\nclass RepositoryRow extends PureComponent {\n    render() {\n        let repository = this.props.repository;\n\n        return <tr>\n            <td>{repository.full_name}</td>\n            {/* <td><GithubAvatar author={repository.owner} /></td> */}\n            <td><FaStar /> {repository.stargazers_count}</td>\n            <td><FaCode /> {repository.forks_count}</td>\n            <td className=\"align-right\">\n                {/* <Route className=\"button button-primary\" to={`/${repository.full_name}`}>Releases</Route> */}\n            </td>\n        </tr>\n    }\n}\n\nRepositoryRow.propTypes = {\n    repository: PropTypes.object.isRequired,\n}\n\n// Export the class\nexport default RepositoryRow;\n","import HintMessage from './HintMessage';\nexport default HintMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Estilos\nimport './HintMessage.css';\n\n/**\n * Muestra un mensaje aplicandole un estilo predeterminado\n */\nclass HintMessage extends React.PureComponent {\n    render = () => <p className=\"HintMessage\">{this.props.children}</p>;\n}\n\nHintMessage.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.string\n    ]).isRequired\n}\n\n// Export the class\nexport default HintMessage;\n","import RepositoryList from './RepositoryList';\nexport default RepositoryList;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types'\n\n// Componentes\nimport Paginator from '../Paginator'\nimport RepositoryRow from '../RepositoryRow'\nimport HintMessage from '../HintMessage'\n\n/**\n * Muestra la lista de Releases\n */\nclass RepositoryList extends PureComponent {\n\n    renderMessage() {\n        let text = '';\n\n        if (this.props.loading) {\n            text = <span>Search Results for <b>{this.props.search}</b></span>;\n        } else if (this.props.data.length > 0) {\n            text = <span>We found <b> {this.props.data.length}</b> data for<b> {this.props.search}</b> </span>;\n        } else if (this.props.data.length === 0 && this.props.queried) {\n            text = <span> We could't fin any data matching <b>{this.props.search}</b></span>;\n        } else {\n            text = 'Type the name of a repository and click search';\n        }\n        return <HintMessage> {text} </HintMessage>\n    }\n\n    renderTable() {\n        if (this.props.data.length === 0) {\n            return null\n        } else {\n            return <table className=\"u-full-width\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Author</th>\n                        <th>Release date</th>\n                        <th>Download</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.props.data.map(repository =>\n                            <RepositoryRow repository={repository} key={repository.id} />\n                        )\n                    }\n                </tbody>\n            </table>;\n        }\n    }\n\n\n    render() {\n        return <section className=\"RepositoryList\">\n            {this.renderMessage()}\n            {this.renderTable()}\n        </section>;\n    }\n}\n\nRepositoryList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    loading: PropTypes.bool.isRequired,\n    queried: PropTypes.bool.isRequired,\n    search: PropTypes.string.isRequired\n}\n\n// Export the class\nexport default Paginator(RepositoryList);\n","import SearchContainer from './SearchContainer';\nexport default SearchContainer;\n","import React, { Component } from 'react';\n\n// Importamos los componentes\nimport Header from '../../components/Header'\nimport SearchForm from '../../components/SearchForm'\nimport RepositoryList from '../../components/RepositoryList'\n\nclass SearchContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onSubmit = this.onSubmit.bind(this)\n\n        this.state = {\n            loading: false,\n            result: [],\n            search: '',\n            queried: false\n        }\n    }\n\n    stubData() {\n        let repo = {\n            full_name: 'My Repository',\n            owner: {\n                login: 'Angel',\n                avatar_url: 'https://avatars.githubusercontent.com/u/4056725?v=3',\n                html_url: 'https://github.com/Angelmmiguel'\n            },\n            stargazers_count: 10,\n            forks_count: 5\n        }\n        return [\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo),\n            Object.assign({}, repo)\n        ]\n    }\n\n    onSubmit(value) {\n        this.setState({ loading: true })\n        setTimeout(() => {\n            this.setState({ search: value, loading: false, queried: true, result: this.stubData() })\n        }, 2000);\n    }\n\n    render() {\n        return <main className=\"container\">\n            <Header />\n            <SearchForm onSubmit={this.onSubmit} search={this.search} />\n            <h1>Búsqueda s</h1>\n            <RepositoryList data={this.state.result} loading={this.state.loading} queried={this.state.queried} search={this.state.search} />\n        </main>\n    }\n}\n\nexport default SearchContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// Importamos los componentes\n//import Header from './components/Header';\nimport SearchContainer from './containers/SearchContainer';\n// import DetailsContainer from './containers/DetailsContainer';\n\nReactDOM.render(\n    //<Header />,\n    <SearchContainer />,\n    // <DetailsContainer />,,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}